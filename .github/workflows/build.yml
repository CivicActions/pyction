name: 🏗️ and 📤 🐳 🖼️

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"
  release:
    types: [published]

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-image:
    name: 🏗️📤 Build and push 🐳 image
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v5

      - name: ⚙️ Set up QEMU (multi-arch emulation)
        uses: docker/setup-qemu-action@v3

      - name: 🧱 Set up Docker Buildx (multi-arch builder)
        uses: docker/setup-buildx-action@v3

      - name: 🔑📦 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍📝 Extract metadata (🏷️, 🏷️) for 🐳
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,priority=100,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=semver,pattern={{version}},priority=150
            type=semver,pattern={{major}}.{{minor}},priority=160
            type=semver,pattern={{major}},priority=170
            type=sha,enable=true,prefix={{branch}}-,suffix=,format=short,priority=300
            type=raw,prefix={{branch}}-,value=latest,priority=200,enable=${{ github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Yeet 🐳 🖼️
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}

      # 🧩 Generate and upload SBOM automatically after successful build
      - name: 🧾 Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.0

      - name: 🧩 Generate SBOM
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "📦 Generating SBOM for $IMAGE_TAG"
          syft "$IMAGE_TAG" -o cyclonedx-json > sbom.cyclonedx.json

      - name: 🚀 Upload SBOM to Dependency-Track
        uses: DependencyTrack/gh-upload-sbom@v3
        with:
          protocol: https
          serverHostname: ${{ secrets.DEPENDENCYTRACK_HOSTNAME }}
          apiKey: ${{ secrets.DEPENDENCYTRACK_API_KEY }}
          project: ${{ secrets.DEPENDENCYTRACK_PROJECT }}
          bomFilename: sbom.cyclonedx.json
          autoCreate: true

      - name: 📦 Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.cyclonedx.json
